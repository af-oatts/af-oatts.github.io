---
import { GITHUB_OWNER, GITHUB_REPO } from "../lib/constants";

// Fetch releases from GitHub API

const response = await fetch(
    `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/releases`,
    {
        headers: {
            Accept: "application/vnd.github+json",
        },
    },
);

let releases = await response.json();

// Handle API errors
if (!Array.isArray(releases)) {
    console.error("GitHub API error:", releases);
    releases = [];
}

// Helper function to find asset by pattern
function findAsset(assets: any[], pattern: RegExp) {
    return assets.find((asset: any) => pattern.test(asset.name));
}

// Helper function to format file size
function formatSize(bytes: number) {
    return Math.round(bytes / (1024 * 1024)) + " MB";
}

// Helper function to extract SHA-256 from digest field
function getSHA256(digest: string | undefined) {
    if (!digest) return null;
    // digest format is "sha256:hash" so we split and take the hash part
    const parts = digest.split(":");
    return parts.length > 1 ? parts[1] : null;
}

// Helper to get file extension without dot
function getExtension(filename: string) {
    const parts = filename.split(".");
    return parts[parts.length - 1].toLowerCase();
}
---

<section class="py-5 section-muted">
    <div class="container">
        <h2 class="mb-4">Other releases</h2>

        <div
            class="table-container rounded-4 shadow-sm overflow-hidden border border-secondary-subtle bg-body-tertiary"
        >
            <div class="table-responsive">
                <table
                    class="table align-middle mb-0 table-borderless no-hover"
                >
                    <thead class="sticky-top bg-body-secondary">
                        <tr>
                            <th
                                class="text-nowrap"
                                style="min-width:180px;position:sticky;left:0;z-index:2;"
                                >Release</th
                            >
                            <th class="text-center"
                                >Windows x64<br /><span class="text-muted small"
                                    >.exe / .zip</span
                                ></th
                            >
                            <th class="text-center"
                                >Windows ARM64<br /><span
                                    class="text-muted small">.exe</span
                                ></th
                            >
                            <th class="text-center"
                                >macOS Apple Silicon<br /><span
                                    class="text-muted small">.dmg</span
                                ></th
                            >
                            <th class="text-center"
                                >macOS Intel<br /><span class="text-muted small"
                                    >.dmg</span
                                ></th
                            >
                            <th class="text-center"
                                >Linux (Debian)<br /><span
                                    class="text-muted small">.deb</span
                                ></th
                            >
                            <th class="text-center"
                                >Linux (Red Hat)<br /><span
                                    class="text-muted small">.rpm</span
                                ></th
                            >
                            <th class="text-center"
                                >Linux (AppImage)<br /><span class="text-muted small"
                                    >.appimage</span
                                ></th
                            >
                        </tr>
                    </thead>

                    <tbody>
                        {
                            releases.slice(0, 10).map((release: any) => {
                                const assets = release.assets || [];
                                const date = new Date(release.published_at)
                                    .toISOString()
                                    .split("T")[0];
                                const releaseTag = release.tag_name;

                                // Define patterns for each platform - adjust these to match your naming convention
                                // Your naming: boatts_0.1.0_x64.dmg, boatts_0.1.0_aarch64.dmg, boatts_x64.app.tar.gz, etc.
                                const winX64 =
                                    findAsset(
                                        assets,
                                        /(win|windows).*(x64|x86[_-]64|amd64).*\.(exe|zip)/i,
                                    ) ||
                                    findAsset(assets, /x64.*\.exe$/i) ||
                                    findAsset(assets, /_x64\.(exe|msi)$/i);

                                const winARM =
                                    findAsset(
                                        assets,
                                        /(win|windows).*arm64.*\.(exe|zip)/i,
                                    ) ||
                                    findAsset(
                                        assets,
                                        /_aarch64\.(exe|msi)$/i,
                                    ) ||
                                    findAsset(
                                        assets,
                                        /aarch64.*windows.*\.(exe|msi)/i,
                                    );

                                // macOS ARM: prefer .app.tar.gz over .dmg
                                const macARM =
                                    findAsset(
                                        assets,
                                        /aarch64\.app\.tar\.gz$/i,
                                    ) ||
                                    findAsset(assets, /_aarch64\.dmg$/i) ||
                                    findAsset(
                                        assets,
                                        /(macos|darwin).*(arm64|aarch64).*\.(dmg|app\.tar\.gz)/i,
                                    );

                                // macOS Intel: prefer .app.tar.gz over .dmg
                                const macIntel =
                                    findAsset(assets, /x64\.app\.tar\.gz$/i) ||
                                    findAsset(assets, /_x64\.dmg$/i) ||
                                    findAsset(
                                        assets,
                                        /(macos|darwin).*(x64|x86[_-]64|intel).*\.(dmg|app\.tar\.gz)/i,
                                    );

                                // Linux formats
                                const linuxDeb =
                                    findAsset(
                                        assets,
                                        /(amd64|x86[_-]64).*\.deb$/i,
                                    ) ||
                                    findAsset(assets, /_x64\.deb$/i) ||
                                    findAsset(assets, /\.deb$/i);

                                const linuxRpm =
                                    findAsset(assets, /(x86[_-]64).*\.rpm$/i) ||
                                    findAsset(assets, /_x64\.rpm$/i) ||
                                    findAsset(assets, /\.rpm$/i);

                                const appImage =
                                    findAsset(assets, /\.appimage$/i) ||
                                    findAsset(
                                        assets,
                                        /(x86[_-]64|amd64).*\.AppImage$/i,
                                    );

                                // Define platform metadata for each asset
                                const platforms = [
                                    {
                                        asset: winX64,
                                        os: "windows",
                                        variant: "x64",
                                    },
                                    {
                                        asset: winARM,
                                        os: "windows",
                                        variant: "arm",
                                    },
                                    {
                                        asset: macARM,
                                        os: "macos",
                                        variant: "arm",
                                    },
                                    {
                                        asset: macIntel,
                                        os: "macos",
                                        variant: "x64",
                                    },
                                    {
                                        asset: linuxDeb,
                                        os: "linux",
                                        variant: "deb",
                                    },
                                    {
                                        asset: linuxRpm,
                                        os: "linux",
                                        variant: "rpm",
                                    },
                                    {
                                        asset: appImage,
                                        os: "linux",
                                        variant: "appimage",
                                    },
                                ];

                                return (
                                    <tr>
                                        <th
                                            scope="row"
                                            style="position:sticky;left:0;z-index:1;"
                                        >
                                            <div class="d-flex flex-column">
                                                <span class="fw-semibold">
                                                    {release.tag_name}
                                                </span>
                                                <span class="text-muted small">
                                                    {date}
                                                </span>
                                            </div>
                                        </th>

                                        {platforms.map((platform, idx) => {
                                            const asset = platform.asset;
                                            const link = asset
                                                ? `/installed/${platform.os}_${platform.variant}_${getExtension(asset.name)}/${releaseTag}/${asset.name}`
                                                : "";
                                            return (
                                                <td class="text-center">
                                                    {asset ? (
                                                        <>
                                                            <a
                                                                href={link}
                                                                class="btn btn-sm btn-outline-primary w-100 stubby-btn"
                                                            >
                                                                Download ·{" "}
                                                                {formatSize(
                                                                    asset.size,
                                                                )}
                                                            </a>
                                                            {asset.digest && (
                                                                <a
                                                                    href="#"
                                                                    class="checksum-link small d-block mt-1 js-copy"
                                                                    data-copy={
                                                                        getSHA256(
                                                                            asset.digest,
                                                                        ) || ""
                                                                    }
                                                                >
                                                                    SHA-256
                                                                </a>
                                                            )}
                                                        </>
                                                    ) : (
                                                        <span class="text-muted small">
                                                            —
                                                        </span>
                                                    )}
                                                </td>
                                            );
                                        })}
                                    </tr>
                                );
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <style>
        .table td,
        .table th {
            padding: 0.65rem 0.6rem;
            vertical-align: middle;
        }
        .table-container {
            background-color: var(--bs-body-bg);
        }
        thead th {
            top: 0;
        }

        .no-hover tbody tr:nth-child(odd) > * {
            background-color: var(--bs-tertiary-bg) !important;
        }
        .no-hover tbody tr:nth-child(even) > * {
            background-color: var(--bs-body-bg) !important;
        }

        .no-hover tbody tr:hover > * {
            background-color: inherit !important;
        }

        .no-hover tbody tr:not(:last-child) > * {
            border-bottom: 1px solid var(--bs-border-color-translucent);
        }

        .section-muted {
            background-color: var(--bs-tertiary-bg);
        }

        .stubby-btn {
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            line-height: 1.2;
            font-size: 0.82rem;
        }

        .checksum-link {
            color: var(--bs-primary);
            text-decoration: underline;
            cursor: pointer;
        }
        .checksum-link:hover {
            text-decoration: none;
            color: var(--bs-primary-hover, var(--bs-primary));
        }
    </style>

    <script>
        document.addEventListener("click", async (e) => {
            //@ts-ignore
            const link = e.target?.closest(".js-copy");
            if (!link) return;
            e.preventDefault();
            const text = link.getAttribute("data-copy") || "";
            try {
                await navigator.clipboard.writeText(text);
                // Optional: Show copied feedback
                const originalText = link.textContent;
                link.textContent = "Copied!";
                setTimeout(() => {
                    link.textContent = originalText;
                }, 2000);
            } catch {}
        });
    </script>
</section>
